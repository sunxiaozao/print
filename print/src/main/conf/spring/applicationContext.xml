<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<task:annotation-driven />

	
	
    <!-- 扫描注解Bean -->
	<context:component-scan base-package="com.lubian.cpf">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
	<bean class="org.apache.commons.configuration.PropertiesConfiguration" name="propertiesConfiguration" scope="singleton">
		<constructor-arg value="config/all.properties" />
	</bean>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties">
			<bean class="org.apache.commons.configuration.ConfigurationConverter" factory-method="getProperties">
				<constructor-arg ref="propertiesConfiguration" />
			</bean>
		</property>
	</bean>

	 <!-- 国际化的消息资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:i18n/messages</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
	
	<bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" scope="singleton">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/> 
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<!--两次连接中间隔时间，单位毫秒。Default: 1000 -->
		<property name="acquireRetryDelay" value="1000"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="60"></property>  
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->   
		<property name="breakAfterAcquireFailure" value="false"></property>
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" scope="singleton" >
		<constructor-arg>
			<ref bean="dataSourceTarget" />
		</constructor-arg>		
	</bean>

      <!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true"></aop:aspectj-autoproxy>
	
	<!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="txManager"/>

	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="count*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="list*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.lubian.cpf.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>    

   <!-- MyBatis ORM operation class -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="classpath:sql-map-config.xml" />  
    </bean>
  	    
    <!-- Spring MyBatis template -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>  
    
    <bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="preferFileSystemAccess" value="false" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="output_encoding">UTF-8</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="number_format">#</prop>
			</props>
		</property>
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
      
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">		
		<property name="host" value="${mail.host}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
	</bean> 
	
	
	<!--startup Bean-->  
	<bean id="z"
			class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
			<property name="triggers">
				<list>
					<!--  
					<ref bean="dailyJobTrigger" />
					<ref bean="instantJobTrigger" />
					-->					
				</list>
			</property>
		</bean>   
	<!--work Bean-->  
	<bean id="dailyJobService" class="com.lubian.cpf.service.job.DailyJobServiceImpl"></bean> 
	<bean id="instantJobService" class="com.lubian.cpf.service.job.AutoMailServiceImpl"></bean>
	   
	<!--******** instant mail start********-->
	<!--jobBean -->  
	<bean id="dailyJob"
			class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
			<property name="targetObject">
				<ref bean="dailyJobService" />
			</property>
			<property name="targetMethod">
				<value>performAutoJob</value>
			</property>
		</bean>
	<bean id="instantJob"
			class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
			<property name="targetObject">
				<ref bean="instantJobService" />
			</property>
			<property name="targetMethod">
				<value>sendAutoMail</value>
			</property>
		</bean> 
	<!--job interval-->  
	<bean id="dailyJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
			<property name="jobDetail">
				<ref bean="dailyJob" />
			</property>
			<property name="cronExpression">
				<value>0 0 2 * * ?</value>
			</property>
		</bean>
	<bean id="instantJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
			<property name="jobDetail">
				<ref bean="instantJob" />
			</property>
			<property name="cronExpression">
				<value>0 0/1 * * * ?</value>
			</property>
		</bean>
	<!-- ******** instant mail end******** -->	
	
	<!-- ******** 验证码插件******** -->
	<bean id="captchaProducer"
	        class="com.google.code.kaptcha.impl.DefaultKaptcha">
	        <property name="config">
	                <bean class="com.google.code.kaptcha.util.Config">
	                        <constructor-arg type="java.util.Properties">
	                                <props>
	                                        <prop key="kaptcha.image.width">100</prop> 
	                                        <prop key="kaptcha.image.height">30</prop>
	                                        <prop key="kaptcha.textproducer.font.size">22</prop>
	                                        <prop key="kaptcha.textproducer.char.length">4</prop>
	                                        <prop key="kaptcha.textproducer.char.space">6</prop>
	                                        <prop key="kaptcha.textproducer.font.color">black</prop>
	                                        <prop key="kaptcha.border.color">LIGHT_GRAY</prop>
	                                        <prop key="kaptcha.background.clear.from">WHITE</prop>
	                                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
	                                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
	                                        <prop key="kaptcha.textproducer.char.string">0123456789</prop>
	                                </props>
	                        </constructor-arg>
	                </bean>
	        </property>
	</bean>	
	
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
  		<property name="definitions">
    	<list>
	      <value>classpath:spring/tiles.xml</value>
	      <value>classpath:spring/tiles-doctor.xml</value>
	      <value>classpath:spring/tiles-member.xml</value>
    	</list>
  		</property>
	</bean>	
	
</beans>

